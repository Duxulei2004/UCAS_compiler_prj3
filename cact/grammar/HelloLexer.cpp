
    #include <vector>


// Generated from ./Hello.g4 by ANTLR 4.13.1


#include "HelloLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct HelloLexerStaticData final {
  HelloLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HelloLexerStaticData(const HelloLexerStaticData&) = delete;
  HelloLexerStaticData(HelloLexerStaticData&&) = delete;
  HelloLexerStaticData& operator=(const HelloLexerStaticData&) = delete;
  HelloLexerStaticData& operator=(HelloLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hellolexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HelloLexerStaticData *hellolexerLexerStaticData = nullptr;

void hellolexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hellolexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(hellolexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HelloLexerStaticData>(
    std::vector<std::string>{
      "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "VOID_KW", 
      "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW", 
      "LeftBracket", "RightBracket", "LeftParen", "RightParen", "Plus", 
      "Minus", "Not", "Star", "Div", "Mod", "LessEqual", "Less", "GreaterEqual", 
      "Greater", "Equal", "NotEqual", "AndAnd", "OrOr", "Semi", "Comma", 
      "Assign", "Dot", "LeftBrace", "RightBrace", "Ident", "IntConst", "HexadecConst", 
      "OctalConst", "DecimalConst", "FloatConst", "DecimalFloatConst", "HexadecimalFloatConst", 
      "FractionalConst", "ExponentPart", "BinaryExponentPart", "Sign", "DigitSequence", 
      "Digit", "HexPrefix", "HexFractionalConst", "HexDigitSequence", "HexDigit", 
      "FloatSuffix", "CharConst", "EscapeSequence", "NewLine", "WhiteSpace", 
      "LineComment", "BlockComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'double'", "'char'", "'float'", "'void'", 
      "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'", 
      "'['", "']'", "'('", "')'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", 
      "'<='", "'<'", "'>='", "'>'", "'=='", "'!='", "'&&'", "'||'", "';'", 
      "','", "'='", "'.'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "VOID_KW", 
      "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW", 
      "LeftBracket", "RightBracket", "LeftParen", "RightParen", "Plus", 
      "Minus", "Not", "Star", "Div", "Mod", "LessEqual", "Less", "GreaterEqual", 
      "Greater", "Equal", "NotEqual", "AndAnd", "OrOr", "Semi", "Comma", 
      "Assign", "Dot", "LeftBrace", "RightBrace", "Ident", "IntConst", "HexadecConst", 
      "OctalConst", "DecimalConst", "FloatConst", "DecimalFloatConst", "HexadecimalFloatConst", 
      "FractionalConst", "ExponentPart", "BinaryExponentPart", "Sign", "DigitSequence", 
      "Digit", "HexPrefix", "HexFractionalConst", "HexDigitSequence", "HexDigit", 
      "FloatSuffix", "CharConst", "EscapeSequence", "NewLine", "WhiteSpace", 
      "LineComment", "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,61,426,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
  	13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
  	20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
  	26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
  	31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,5,36,249,8,
  	36,10,36,12,36,252,9,36,1,37,1,37,1,37,3,37,257,8,37,1,38,1,38,1,38,1,
  	38,3,38,263,8,38,1,38,4,38,266,8,38,11,38,12,38,267,1,39,1,39,4,39,272,
  	8,39,11,39,12,39,273,1,40,1,40,1,40,5,40,279,8,40,10,40,12,40,282,9,40,
  	3,40,284,8,40,1,41,1,41,3,41,288,8,41,1,42,1,42,3,42,292,8,42,1,42,3,
  	42,295,8,42,1,42,1,42,1,42,3,42,300,8,42,3,42,302,8,42,1,43,1,43,1,43,
  	1,43,3,43,308,8,43,1,43,1,43,1,43,1,43,3,43,314,8,43,3,43,316,8,43,1,
  	44,3,44,319,8,44,1,44,1,44,1,44,1,44,1,44,3,44,326,8,44,1,45,1,45,3,45,
  	330,8,45,1,45,1,45,1,46,1,46,3,46,336,8,46,1,46,1,46,1,47,1,47,1,48,4,
  	48,343,8,48,11,48,12,48,344,1,49,1,49,1,50,1,50,1,50,1,50,3,50,353,8,
  	50,1,51,3,51,356,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,365,8,51,
  	1,52,4,52,368,8,52,11,52,12,52,369,1,53,1,53,1,54,1,54,1,55,1,55,1,55,
  	3,55,379,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,3,57,388,8,57,1,57,3,
  	57,391,8,57,1,57,1,57,1,58,4,58,396,8,58,11,58,12,58,397,1,58,1,58,1,
  	59,1,59,1,59,1,59,5,59,406,8,59,10,59,12,59,409,9,59,1,59,1,59,1,60,1,
  	60,1,60,1,60,5,60,417,8,60,10,60,12,60,420,9,60,1,60,1,60,1,60,1,60,1,
  	60,1,418,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
  	47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
  	35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
  	93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
  	57,115,58,117,59,119,60,121,61,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,
  	65,90,95,95,97,122,3,0,48,57,65,70,97,102,1,0,48,55,1,0,49,57,1,0,48,
  	57,2,0,69,69,101,101,2,0,80,80,112,112,2,0,43,43,45,45,4,0,70,70,76,76,
  	102,102,108,108,4,0,10,10,13,13,39,39,92,92,6,0,39,39,92,92,98,98,110,
  	110,114,114,116,116,3,0,9,10,13,13,32,32,2,0,10,10,13,13,457,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
  	1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
  	0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
  	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
  	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
  	0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
  	0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
  	0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
  	0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,129,1,0,0,0,5,133,1,0,0,0,
  	7,140,1,0,0,0,9,145,1,0,0,0,11,151,1,0,0,0,13,156,1,0,0,0,15,159,1,0,
  	0,0,17,164,1,0,0,0,19,170,1,0,0,0,21,176,1,0,0,0,23,185,1,0,0,0,25,192,
  	1,0,0,0,27,194,1,0,0,0,29,196,1,0,0,0,31,198,1,0,0,0,33,200,1,0,0,0,35,
  	202,1,0,0,0,37,204,1,0,0,0,39,206,1,0,0,0,41,208,1,0,0,0,43,210,1,0,0,
  	0,45,212,1,0,0,0,47,215,1,0,0,0,49,217,1,0,0,0,51,220,1,0,0,0,53,222,
  	1,0,0,0,55,225,1,0,0,0,57,228,1,0,0,0,59,231,1,0,0,0,61,234,1,0,0,0,63,
  	236,1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,0,
  	0,73,246,1,0,0,0,75,256,1,0,0,0,77,262,1,0,0,0,79,269,1,0,0,0,81,283,
  	1,0,0,0,83,287,1,0,0,0,85,301,1,0,0,0,87,315,1,0,0,0,89,325,1,0,0,0,91,
  	327,1,0,0,0,93,333,1,0,0,0,95,339,1,0,0,0,97,342,1,0,0,0,99,346,1,0,0,
  	0,101,352,1,0,0,0,103,364,1,0,0,0,105,367,1,0,0,0,107,371,1,0,0,0,109,
  	373,1,0,0,0,111,375,1,0,0,0,113,382,1,0,0,0,115,390,1,0,0,0,117,395,1,
  	0,0,0,119,401,1,0,0,0,121,412,1,0,0,0,123,124,5,99,0,0,124,125,5,111,
  	0,0,125,126,5,110,0,0,126,127,5,115,0,0,127,128,5,116,0,0,128,2,1,0,0,
  	0,129,130,5,105,0,0,130,131,5,110,0,0,131,132,5,116,0,0,132,4,1,0,0,0,
  	133,134,5,100,0,0,134,135,5,111,0,0,135,136,5,117,0,0,136,137,5,98,0,
  	0,137,138,5,108,0,0,138,139,5,101,0,0,139,6,1,0,0,0,140,141,5,99,0,0,
  	141,142,5,104,0,0,142,143,5,97,0,0,143,144,5,114,0,0,144,8,1,0,0,0,145,
  	146,5,102,0,0,146,147,5,108,0,0,147,148,5,111,0,0,148,149,5,97,0,0,149,
  	150,5,116,0,0,150,10,1,0,0,0,151,152,5,118,0,0,152,153,5,111,0,0,153,
  	154,5,105,0,0,154,155,5,100,0,0,155,12,1,0,0,0,156,157,5,105,0,0,157,
  	158,5,102,0,0,158,14,1,0,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,
  	162,5,115,0,0,162,163,5,101,0,0,163,16,1,0,0,0,164,165,5,119,0,0,165,
  	166,5,104,0,0,166,167,5,105,0,0,167,168,5,108,0,0,168,169,5,101,0,0,169,
  	18,1,0,0,0,170,171,5,98,0,0,171,172,5,114,0,0,172,173,5,101,0,0,173,174,
  	5,97,0,0,174,175,5,107,0,0,175,20,1,0,0,0,176,177,5,99,0,0,177,178,5,
  	111,0,0,178,179,5,110,0,0,179,180,5,116,0,0,180,181,5,105,0,0,181,182,
  	5,110,0,0,182,183,5,117,0,0,183,184,5,101,0,0,184,22,1,0,0,0,185,186,
  	5,114,0,0,186,187,5,101,0,0,187,188,5,116,0,0,188,189,5,117,0,0,189,190,
  	5,114,0,0,190,191,5,110,0,0,191,24,1,0,0,0,192,193,5,91,0,0,193,26,1,
  	0,0,0,194,195,5,93,0,0,195,28,1,0,0,0,196,197,5,40,0,0,197,30,1,0,0,0,
  	198,199,5,41,0,0,199,32,1,0,0,0,200,201,5,43,0,0,201,34,1,0,0,0,202,203,
  	5,45,0,0,203,36,1,0,0,0,204,205,5,33,0,0,205,38,1,0,0,0,206,207,5,42,
  	0,0,207,40,1,0,0,0,208,209,5,47,0,0,209,42,1,0,0,0,210,211,5,37,0,0,211,
  	44,1,0,0,0,212,213,5,60,0,0,213,214,5,61,0,0,214,46,1,0,0,0,215,216,5,
  	60,0,0,216,48,1,0,0,0,217,218,5,62,0,0,218,219,5,61,0,0,219,50,1,0,0,
  	0,220,221,5,62,0,0,221,52,1,0,0,0,222,223,5,61,0,0,223,224,5,61,0,0,224,
  	54,1,0,0,0,225,226,5,33,0,0,226,227,5,61,0,0,227,56,1,0,0,0,228,229,5,
  	38,0,0,229,230,5,38,0,0,230,58,1,0,0,0,231,232,5,124,0,0,232,233,5,124,
  	0,0,233,60,1,0,0,0,234,235,5,59,0,0,235,62,1,0,0,0,236,237,5,44,0,0,237,
  	64,1,0,0,0,238,239,5,61,0,0,239,66,1,0,0,0,240,241,5,46,0,0,241,68,1,
  	0,0,0,242,243,5,123,0,0,243,70,1,0,0,0,244,245,5,125,0,0,245,72,1,0,0,
  	0,246,250,7,0,0,0,247,249,7,1,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
  	248,1,0,0,0,250,251,1,0,0,0,251,74,1,0,0,0,252,250,1,0,0,0,253,257,3,
  	81,40,0,254,257,3,79,39,0,255,257,3,77,38,0,256,253,1,0,0,0,256,254,1,
  	0,0,0,256,255,1,0,0,0,257,76,1,0,0,0,258,259,5,48,0,0,259,263,5,120,0,
  	0,260,261,5,48,0,0,261,263,5,88,0,0,262,258,1,0,0,0,262,260,1,0,0,0,263,
  	265,1,0,0,0,264,266,7,2,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,
  	0,0,0,267,268,1,0,0,0,268,78,1,0,0,0,269,271,5,48,0,0,270,272,7,3,0,0,
  	271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,80,
  	1,0,0,0,275,284,5,48,0,0,276,280,7,4,0,0,277,279,7,5,0,0,278,277,1,0,
  	0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,
  	280,1,0,0,0,283,275,1,0,0,0,283,276,1,0,0,0,284,82,1,0,0,0,285,288,3,
  	85,42,0,286,288,3,87,43,0,287,285,1,0,0,0,287,286,1,0,0,0,288,84,1,0,
  	0,0,289,291,3,89,44,0,290,292,3,91,45,0,291,290,1,0,0,0,291,292,1,0,0,
  	0,292,294,1,0,0,0,293,295,3,109,54,0,294,293,1,0,0,0,294,295,1,0,0,0,
  	295,302,1,0,0,0,296,297,3,97,48,0,297,299,3,91,45,0,298,300,3,109,54,
  	0,299,298,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,289,1,0,0,0,301,
  	296,1,0,0,0,302,86,1,0,0,0,303,304,3,101,50,0,304,305,3,103,51,0,305,
  	307,3,93,46,0,306,308,3,109,54,0,307,306,1,0,0,0,307,308,1,0,0,0,308,
  	316,1,0,0,0,309,310,3,101,50,0,310,311,3,105,52,0,311,313,3,93,46,0,312,
  	314,3,109,54,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,303,
  	1,0,0,0,315,309,1,0,0,0,316,88,1,0,0,0,317,319,3,97,48,0,318,317,1,0,
  	0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,5,46,0,0,321,326,3,97,48,
  	0,322,323,3,97,48,0,323,324,5,46,0,0,324,326,1,0,0,0,325,318,1,0,0,0,
  	325,322,1,0,0,0,326,90,1,0,0,0,327,329,7,6,0,0,328,330,3,95,47,0,329,
  	328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,3,97,48,0,332,92,
  	1,0,0,0,333,335,7,7,0,0,334,336,3,95,47,0,335,334,1,0,0,0,335,336,1,0,
  	0,0,336,337,1,0,0,0,337,338,3,97,48,0,338,94,1,0,0,0,339,340,7,8,0,0,
  	340,96,1,0,0,0,341,343,3,99,49,0,342,341,1,0,0,0,343,344,1,0,0,0,344,
  	342,1,0,0,0,344,345,1,0,0,0,345,98,1,0,0,0,346,347,7,5,0,0,347,100,1,
  	0,0,0,348,349,5,48,0,0,349,353,5,120,0,0,350,351,5,48,0,0,351,353,5,88,
  	0,0,352,348,1,0,0,0,352,350,1,0,0,0,353,102,1,0,0,0,354,356,3,105,52,
  	0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,46,0,0,358,
  	365,3,105,52,0,359,360,3,105,52,0,360,361,5,46,0,0,361,365,1,0,0,0,362,
  	363,5,46,0,0,363,365,3,105,52,0,364,355,1,0,0,0,364,359,1,0,0,0,364,362,
  	1,0,0,0,365,104,1,0,0,0,366,368,3,107,53,0,367,366,1,0,0,0,368,369,1,
  	0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,106,1,0,0,0,371,372,7,2,0,0,
  	372,108,1,0,0,0,373,374,7,9,0,0,374,110,1,0,0,0,375,378,5,39,0,0,376,
  	379,8,10,0,0,377,379,3,113,56,0,378,376,1,0,0,0,378,377,1,0,0,0,379,380,
  	1,0,0,0,380,381,5,39,0,0,381,112,1,0,0,0,382,383,5,92,0,0,383,384,7,11,
  	0,0,384,114,1,0,0,0,385,387,5,13,0,0,386,388,5,10,0,0,387,386,1,0,0,0,
  	387,388,1,0,0,0,388,391,1,0,0,0,389,391,5,10,0,0,390,385,1,0,0,0,390,
  	389,1,0,0,0,391,392,1,0,0,0,392,393,6,57,0,0,393,116,1,0,0,0,394,396,
  	7,12,0,0,395,394,1,0,0,0,396,397,1,0,0,0,397,395,1,0,0,0,397,398,1,0,
  	0,0,398,399,1,0,0,0,399,400,6,58,0,0,400,118,1,0,0,0,401,402,5,47,0,0,
  	402,403,5,47,0,0,403,407,1,0,0,0,404,406,8,13,0,0,405,404,1,0,0,0,406,
  	409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,407,1,
  	0,0,0,410,411,6,59,0,0,411,120,1,0,0,0,412,413,5,47,0,0,413,414,5,42,
  	0,0,414,418,1,0,0,0,415,417,9,0,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,
  	419,1,0,0,0,418,416,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,5,
  	42,0,0,422,423,5,47,0,0,423,424,1,0,0,0,424,425,6,60,0,0,425,122,1,0,
  	0,0,31,0,250,256,262,267,273,280,283,287,291,294,299,301,307,313,315,
  	318,325,329,335,344,352,355,364,369,378,387,390,397,407,418,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hellolexerLexerStaticData = staticData.release();
}

}

HelloLexer::HelloLexer(CharStream *input) : Lexer(input) {
  HelloLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *hellolexerLexerStaticData->atn, hellolexerLexerStaticData->decisionToDFA, hellolexerLexerStaticData->sharedContextCache);
}

HelloLexer::~HelloLexer() {
  delete _interpreter;
}

std::string HelloLexer::getGrammarFileName() const {
  return "Hello.g4";
}

const std::vector<std::string>& HelloLexer::getRuleNames() const {
  return hellolexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& HelloLexer::getChannelNames() const {
  return hellolexerLexerStaticData->channelNames;
}

const std::vector<std::string>& HelloLexer::getModeNames() const {
  return hellolexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& HelloLexer::getVocabulary() const {
  return hellolexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView HelloLexer::getSerializedATN() const {
  return hellolexerLexerStaticData->serializedATN;
}

const atn::ATN& HelloLexer::getATN() const {
  return *hellolexerLexerStaticData->atn;
}




void HelloLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hellolexerLexerInitialize();
#else
  ::antlr4::internal::call_once(hellolexerLexerOnceFlag, hellolexerLexerInitialize);
#endif
}
